name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Set up test environment
      run: |
        mkdir -p cache data
        echo "ENTSOE_API_KEY=test-key-for-ci" > .env
        echo "ZONE_EIC=10YNL----------L" >> .env
        echo "CACHE_DIR=./cache" >> .env
        echo "DATA_ROOT=./data" >> .env

    - name: Run linting with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run type checking with mypy
      run: |
        pip install mypy types-requests types-python-dateutil
        mypy ha_entsoe.py api_server.py --ignore-missing-imports
      continue-on-error: true  # Don't fail CI on type errors initially

    - name: Run security check with bandit
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --severity-level medium
      continue-on-error: true

    - name: Run tests with pytest
      run: |
        pytest --cov=. --cov-report=xml --cov-report=html --cov-report=term-missing -v
      env:
        ENTSOE_API_KEY: test-key-for-ci
        ZONE_EIC: 10YNL----------L
        CACHE_DIR: ./cache
        DATA_ROOT: ./data

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          bandit-report.json
          coverage.xml

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ secrets.DOCKER_USERNAME }}/entsoe-api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.ref == 'refs/heads/main' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm \
          -e ENTSOE_API_KEY=test-key \
          -e ZONE_EIC=10YNL----------L \
          ${{ steps.meta.outputs.tags }} \
          python -c "import ha_entsoe; print('Import successful')"

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust

    - name: Create performance test
      run: |
        cat > locustfile.py << 'EOF'
        from locust import HttpUser, task, between
        import random
        from datetime import date, timedelta

        class APIUser(HttpUser):
            wait_time = between(1, 3)

            def on_start(self):
                # Test dates
                today = date.today()
                self.test_dates = [
                    (today - timedelta(days=i)).isoformat()
                    for i in range(1, 8)
                ]

            @task(3)
            def get_health(self):
                self.client.get("/health")

            @task(2)
            def get_prices(self):
                test_date = random.choice(self.test_dates)
                self.client.get(f"/prices/{test_date}")

            @task(1)
            def analyze_prices(self):
                test_date = random.choice(self.test_dates)
                self.client.get(f"/analyze/{test_date}")
        EOF

    - name: Start API server
      run: |
        export ENTSOE_API_KEY=test-key-for-performance
        export ZONE_EIC=10YNL----------L
        uvicorn api_server:app --host 0.0.0.0 --port 8000 &
        sleep 5
      env:
        ENTSOE_API_KEY: test-key-for-performance

    - name: Run performance tests
      run: |
        locust --headless --users 10 --spawn-rate 2 --run-time 60s --host http://localhost:8000 --html performance-report.html

    - name: Upload performance results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-results
        path: performance-report.html

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your staging deployment commands here
        # For example, using docker-compose, kubectl, or cloud provider CLI

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against staging..."
        # Add smoke tests here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan, performance-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here

    - name: Run post-deployment tests
      run: |
        echo "Running post-deployment verification..."
        # Add production verification tests here

  notify:
    runs-on: ubuntu-latest
    needs: [test, docker-build]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.docker-build.result == 'success'
      run: |
        echo "✅ CI/CD pipeline completed successfully!"
        # Add notification logic (Slack, email, etc.)

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.docker-build.result == 'failure'
      run: |
        echo "❌ CI/CD pipeline failed!"
        # Add failure notification logic
